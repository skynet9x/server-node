`use strict`;

const fs = require(`fs-extra`);
const path = require(`path`);
const child_process = require(`child_process`);

const execSync = (...args) => {
  try {
    return child_process.execSync(...args).toString();
  } catch (error) {
    if (!error.stdout.toString().includes(`nothing to commit`)) {
      throw error;
    }
  }
};

const exec = (...args) => {
  return new Promise((resolve, reject) => {
    child_process.exec(...args, (error, stdout) => {
      if (error) {
        if (stdout.toString().includes(`nothing to commit`)) {
          resolve();
        } else {
          reject(error);
        }
      } else {
        resolve();
      }
    });
  });
};

/**
 * This class executes git commands.
 * @
 * const git = new GitRepository(`./storage`);
 *  */ class GitRepository {
  /**
   * Inits a git repository if not available.
   * @param {string} dir Directory of the git repository
   */
  constructor(dir) {
    if (dir) {
      this.dir = path.normalize(dir);
    } else {
      this.dir = path.normalize(`./storage`);
    }

    // check if a git repository exists
    if (!fs.existsSync(`${this.dir}/.git`)) {
      // check if git is installed
      try {
        const stdout = execSync(`git --version`, { cwd: this.dir }).toString();
        if (!stdout.includes(`git version`)) {
          throw new Error(`Git is not installed.`);
        }
      } catch (error) {
        throw new Error(`Git is not installed.`);
      }

      // init git repository
      execSync(`git init`, { cwd: this.dir });
      execSync(`git add .`, { cwd: this.dir });
      execSync(`git commit -m "Initial commit"`, {
        cwd: this.dir
      });
    }
  }

  /**
   * Executes a git add asynchronous.
   * @param {String} path Path of dir or file
   * @example
   * (async () => {
   *   await git.add(`"/home/user1/storage/cars/car001.json"`);
   * })();
   */
  async add(path) {
    await exec(`git add ${path}`, {
      cwd: this.dir
    });
  }

  /**
   * Executes a git add synchronous.
   * @param {String} path Path of dir or file
   * @example
   * git.addSync(`"/home/user1/storage/cars/car001.json"`);
   */
  addSync(path) {
    execSync(`git add ${path}`, {
      cwd: this.dir
    });
  }

  /**
   * Executes a git commit asynchronous.
   * @param {String} path Path of dir or file
   * @param {String} message Commit message
   * @example
   * (async () => {
   *   await git.commit(`"/home/user1/storage/cars/car001.json"`, `Changed name of car001.`);
   * })();
   */
  async commit(path, message) {
    await exec(`git commit ${path} -m "${message}"`, {
      cwd: this.dir
    });
  }

  /**
   * Executes a git commit synchronous.
   * @param {String} path Path of dir or file
   * @param {String} message Commit message
   * @example
   * git.commitSync(`"/home/user1/storage/cars/car001.json"`, `Changed name of car001.`);
   */
  commitSync(path, message) {
    execSync(`git commit ${path} -m "${message}"`, {
      cwd: this.dir
    });
  }
}

module.exports = GitRepository;
