`use strict`;

const fs = require(`fs-extra`);
const constructor = require(`${__dirname}/JsonStorage/constructor.js`);
const get = require(`${__dirname}/JsonStorage/get.js`);
const getSync = require(`${__dirname}/JsonStorage/getSync.js`);
const getAll = require(`${__dirname}/JsonStorage/getAll.js`);
const getAllSync = require(`${__dirname}/JsonStorage/getAllSync.js`);
const getAllDir = require(`${__dirname}/JsonStorage/getAllDir.js`);
const getAllDirSync = require(`${__dirname}/JsonStorage/getAllDirSync.js`);
const getDirs = require(`${__dirname}/JsonStorage/getDirs.js`);
const getDirsSync = require(`${__dirname}/JsonStorage/getDirsSync.js`);
const getFiles = require(`${__dirname}/JsonStorage/getFiles.js`);
const getFilesSync = require(`${__dirname}/JsonStorage/getFilesSync.js`);
const setAll = require(`${__dirname}/JsonStorage/setAll.js`);
const setAllSync = require(`${__dirname}/JsonStorage/setAllSync.js`);
const set = require(`${__dirname}/JsonStorage/set.js`);
const setSync = require(`${__dirname}/JsonStorage/setSync.js`);
const remove = require(`${__dirname}/JsonStorage/remove.js`);
const removeSync = require(`${__dirname}/JsonStorage/removeSync.js`);
const forEach = require(`${__dirname}/JsonStorage/forEach.js`);
const forEachSync = require(`${__dirname}/JsonStorage/forEachSync.js`);
const renameDir = require(`${__dirname}/JsonStorage/renameDir.js`);
const renameDirSync = require(`${__dirname}/JsonStorage/renameDirSync.js`);
const rename = require(`${__dirname}/JsonStorage/rename.js`);
const renameSync = require(`${__dirname}/JsonStorage/renameSync.js`);
const empty = require(`${__dirname}/JsonStorage/empty.js`);
const emptySync = require(`${__dirname}/JsonStorage/emptySync.js`);
const exists = require(`${__dirname}/JsonStorage/exists.js`);
const existsSync = require(`${__dirname}/JsonStorage/existsSync.js`);

/**
 * This class allows you to save, load, delete, and rename JSON files.
 * The files are stored in the file system.
 *
 * In the following cases, it will throw an error:
 * - invalid dirname
 * - invalid filename
 * - dir not exists
 * - file not exists
 * - blocked dirs or files
 * - wrong permissions of dirs or files
 * - and other unknown cases ...
 *
 * Use for the error handling try-catch and
 * check with `exists()` function	additionally if a dir or file exists.
 *
 * @example
 * const JsonStorage = require(`@geofreak/json-storage`);
 *
 * // init store
 * const store = new JsonStorage(`./storage`);
 *
 * // init store with minify and git support
 * // const store = new JsonStorage(`${__dirname}/storage`, {spaces: 0, EOL: `` , git: true});
 *
 * // sync error handling
 * try {
 *   // check if file exists
 *   if(store.existsSync(`users`, `user001`)){
 *     let json = store.getSync(`users`, `user001`);
 *     console.log(json);
 *   }
 * } catch (err) {
 *   console.error(err);
 * }
 *
 * // async error handling
 * (async () => {
 *   try {
 *     // check if file exists
 *     if(await store.exists(`users`, `user001`)){
 *       let json = await store.get(`users`, `user001`);
 *       console.log(json);
 *     }
 *   } catch (err) {
 *     console.error(err);
 *   }
 * })();
 */
class JsonStorage {

  /**
   * Reads a json file async.
   * @param {string} file Path of json file
   * @example
   * (async () => {
   * 
   *   // read json async
   *   console.log(await JsonStorage.read(`data.json`));
   * 
   * })();
   */
  static async read(file) {
    return await fs.readJson(file);
  }

  /**
   * Reads a json file sync.
   * @param {string} file Path of json file
   * @example
   * // read json sync
   * console.log(JsonStorage.readSync(`data.json`));
   */
  static readSync(file) {
    return fs.readJsonSync(file);
  }

  /**
   * Writes a json file async.
   * @param {string} file Path of json file
   * @param {object} json Content of json file
   * @param {object} options
   * @example
   * // json
   * const json = {
   *   user001: {
   *     name: `Tom`
   *   }
   * };
   * 
   * (async () => {
   * 
   *   // write json async
   *   await JsonStorage.write(`data.json`, json);
   * 
   * })();
   */
  static async write(file, json, options) {
    return await fs.writeJson(file, json, options);
  }

  /**
   * Writes a json file sync.
   * @param {string} file Path of json file
   * @param {object} json Content of json file
   * @param {object} options
   * @example
   * // json
   * const json = {
   *   user001: {
   *     name: `Tom`
   *   }
   * };
   * 
   * // write json sync
   * JsonStorage.writeSync(`${__dirname}/writeSync.json`, json);
   */
  static writeSync(file, json, options) {
    return fs.writeJsonSync(file, json, options);
  }

  /**
   * @param {String} dir Path to the storage directory
   * @param {Object} options Options. Default `{ spaces: 2, EOL: require('os').EOL, git: false }`
   * @param {Number|String} options.spaces Number of spaces to indent; or a string to use for indentation (i.e. pass `\t` for tab indentation). Default is `2`
   * @param {String} options.EOL Set EOL character. Default is `require('os').EOL`
   * @param {Boolean} options.git Enable git support. Default is `false`
   */
  constructor(dir, options) {
    constructor(this, dir, options);
  }

  /**
   * Returns the complete storage or a complete directory as object.
   * @param {string} [dir] Dirname
   * @returns {object} Complete storage or directory (see example)
   * @example
   * (async () => {
   *   // get the whole storage
   *   const obj = await store.getAll();
   *   console.log(obj);
   *   // {
   *   //   "dir1": {
   *   //     "file1": {
   *   //       "content:": "dir1 file1"
   *   //     },
   *   //     "file2": {
   *   //       "content:": "dir1 file 2"
   *   //     }
   *   //   },
   *   //   "dir2": {
   *   //     "file1": {
   *   //       "content:": "dir2 file1"
   *   //     },
   *   //     "file2": {
   *   //       "content:": "dir2 file 2"
   *   //     }
   *   //   }
   *   // }
   *
   *   // get a whole dir
   *   const dir1 = await store.getAll(`dir1`);
   *   console.log(dir1);
   *   // {
   *   //   "file1": {
   *   //     "content:": "dir1 file1"
   *   //   },
   *   //   "file2": {
   *   //     "content:": "dir1 file 2"
   *   //   }
   *   // }
   * })();
   */
  async getAll(dir) {
    if (dir) {
      return await getAllDir(this, dir);
    } else {
      return await getAll(this);
    }
  }

  /**
   * Returns the complete storage or a complete directory as object.
   * @param {string} [dir] Dirname
   * @returns {object} Complete storage or directory (see example)
   * @example
   * // get the whole storage
   * const obj = store.getAllSync();
   * console.log(obj);
   * // {
   * //   "dir1": {
   * //     "file1": {
   * //       "content:": "dir1 file1"
   * //     },
   * //     "file2": {
   * //       "content:": "dir1 file 2"
   * //     }
   * //   },
   * //   "dir2": {
   * //     "file1": {
   * //       "content:": "dir2 file1"
   * //     },
   * //     "file2": {
   * //       "content:": "dir2 file 2"
   * //     }
   * //   }
   * // }
   *
   * // get a whole dir
   * const dir1 = store.getAllSync(`dir1`);
   * console.log(dir1);
   * // {
   * //   "file1": {
   * //     "content:": "dir1 file1"
   * //   },
   * //   "file2": {
   * //     "content:": "dir1 file 2"
   * //   }
   * // }
   */
  getAllSync(dir) {
    if (dir) {
      return getAllDirSync(this, dir);
    } else {
      return getAllSync(this);
    }
  }

  /**
   * Returns the JSON file as object or all filenames of a dir or all dirnames of the storage.
   * @param {string} [dir] Dirname
   * @param {string} [file] Filename
   * @returns {Promise} JSON file as object (`dir` and `file` is set). Array of filenames (`dir` is set only). Array of dirnames (`dir` and `file` are not set).
   * @example
   * (async () => {
   *   // get file
   *   const json = await store.get(`users`, `user001`);
   *   console.log(json); // => { name: `Thomas` }
   *
   *   // get all filenames of a directory
   *   const filenames = await store.get(`users`);
   *   console.log(filenames); // => [`user001`, `user002`, `user003`]
   *
   *   // get all dirnames
   *   const dirnames = await store.get();
   *   console.log(dirnames); // => [`users`, `cars`]
   * })();
   */
  async get(dir, file) {
    if (dir) {
      if (file) {
        return await get(this, dir, file);
      } else {
        return await getFiles(this, dir);
      }
    } else {
      return await getDirs(this);
    }
  }

  /**
   * Returns the JSON file as object or all filenames of a dir or all dirnames of the storage.
   * @param {string} [dir] Dirname
   * @param {string} [file] Filename
   * @returns {object|array} JSON file as object (`dir` and `file` is set). Array of filenames (`dir` is set only). Array of dirnames (`dir` and `file` are not set).
   * @example
   * // get file
   * let json = store.getSync(`users`, `user001`);
   * console.log(json); // => { name: `Thomas` }
   *
   * // get all filenames of a directory
   * let filenames = store.getSync(`users`);
   * console.log(filenames); // => [`user001`, `user002`, `user003`]
   *
   * // get all dirnames
   * let dirnames = store.getSync();
   * console.log(dirnames); // => [`users`, `cars`]
   */
  getSync(dir, file) {
    if (dir) {
      if (file) {
        return getSync(this, dir, file);
      } else {
        return getFilesSync(this, dir);
      }
    } else {
      return getDirsSync(this);
    }
  }

  /**
   * Sets a complete storage or dir (async).
   * @param {string|object} dirOrJson Dirname or json (see example)
   * @param {object} [json] Json (see example)
   * @example
   * const backupStorage = {
   *   "cars": {
   *     "car001": {
   *       "name": "Volkswagen"
   *     },
   *     "car002": {
   *       "name": "Mercedes"
   *     }
   *   },
   *   "users": {
   *     "user001": {
   *       "name": "Jens"
   *     },
   *     "user002": {
   *       "name": "Julia"
   *     }
   *   }
   * };
   * 
   * const backupDir = {
   *   "cat001": {
   *     "name": "Henry"
   *   },
   *   "cat002": {
   *     "name": "Hulk"
   *   }
   * };
   * 
   * (async () => {
   *   // set a complete storage
   *   await store.setAllSync(backupStorage);
   * 
   *   // set a complete dir
   *   await store.setAllSync(`cats`, backupDir);
   * })();
   */
  async setAll(dirOrJson, json) {
    return setAll(this, dirOrJson, json);
  }

  /**
   * Sets a complete storage or dir (sync).
   * @param {string|object} dirOrJson Dirname or json (see example)
   * @param {object} [json] Json (see example)
   * @example
   * const backupStorage = {
   *   "cars": {
   *     "car001": {
   *       "name": "Volkswagen"
   *     },
   *     "car002": {
   *       "name": "Mercedes"
   *     }
   *   },
   *   "users": {
   *     "user001": {
   *       "name": "Jens"
   *     },
   *     "user002": {
   *       "name": "Julia"
   *     }
   *   }
   * };
   * 
   * const backupDir = {
   *   "cat001": {
   *     "name": "Henry"
   *   },
   *   "cat002": {
   *     "name": "Hulk"
   *   }
   * };
   * 
   * // set a complete storage
   * store.setAllSync(backupStorage);
   * 
   * // set a complete dir
   * store.setAllSync(`cats`, backupDir);
   */
  setAllSync(dirOrJson, json) {
    return setAllSync(this, dirOrJson, json);
  }



  /**
   * Sets a JSON object.
   * @param {string} dir Dirname
   * @param {string} file Filename
   * @param {object} json JSON object
   * @returns {Promise}
   * @example
   * (async () => {
   *   // set a directory
   *   await store.set(`users`);
   * 
   *   // set a json 
   *   // (In this case, the directory will be automatically generated if it does not exist.)
   *   await store.set(`users`, `user001`, { name: `Thomas` });
   * })();
   */
  async set(dir, file, json) {
    return set(this, dir, file, json);
  }

  /**
   * Sets a JSON object.
   * @param {string} dir Dirname
   * @param {string} file Filename
   * @param {object} json JSON object
   * @example
   * // set a directory
   * store.setSync(`users`);
   * 
   * // set a json 
   * // (In this case, the directory will be automatically generated if it does not exist.)
   * store.setSync(`users`, `user001`, { name: `Thomas` });
   */
  setSync(dir, file, json) {
    return setSync(this, dir, file, json);
  }

  /**
   * Removes file if dir and file are set.
   * Removes dir if dir is set only.
   * @param {string} dir Dirname
   * @param {string} [file] Filename
   * @returns {Promise}
   * @example
   * (async () => {
   *   // remove directory
   *   await store.remove(`cars`);
   *
   *   // remove file
   *   await store.remove(`users`, `user003`);
   * })();
   */
  async remove(dir, file) {
    return await remove(this, dir, file);
  }

  /**
   * Removes file if dir and file are set.
   * Removes dir if dir is set only.
   * @param {string} dir Dirname
   * @param {string} [file] Filename
   * @example
   * // remove directory
   * store.removeSync(`cars`);
   *
   * // remove file
   * store.removeSync(`users`, `user003`);
   */
  removeSync(dir, file) {
    return removeSync(this, dir, file);
  }

  /**
   * Iterates over files of a dir.
   * @param {string} dir Dirname
   * @param {function} callback Callback function like function(json, file){}
   * @param {function} filter Filter function like function(json, file){ // return true or false;}
   * @returns {Promise}
   * @example
   * (async () => {
   *   // iterate over all files
   *   await store.forEach(`users`, (json, file) => {
   *     console.log(file +`: ` + json);
   *   });
   *   // => user002: { name: `Julia` }
   *   // => user999: { name: `Thomas` }
   *
   *   // iterate over filtered files
   *   // define a filter
   *   function filter(json, file) {
   *     if (json.name.startsWith(`T`)){
   *       return true;
   *     } else {
   *       return false;
   *     }
   *   }
   *   // iterate
   *   await store.forEach(`users`, (json, file) => {
   *     console.log(file +`: ` + json);
   *   }, filter);
   *   // => user999: { name: `Thomas` }
   * })();
   */
  async forEach(dir, callback, filter) {
    return await forEach(this, dir, callback, filter);
  }

  /**
   * Iterates over files of a dir.
   * @param {string} dir Dirname
   * @param {function} callback Callback function like function(json, file){}
   * @param {function} filter Filter function like function(json, file){ // return true or false;}
   * @example
   * // iterate over all files
   * store.forEachSync(`users`, (json, file) => {
   *   console.log(file +`: ` + json);
   * });
   * // => user002: { name: `Julia` }
   * // => user999: { name: `Thomas` }
   *
   *
   * // iterate over filtered files
   * // define a filter
   * function filter(json, file) {
   *   if (json.name.startsWith(`T`)){
   *     return true;
   *   } else {
   *     return false;
   *   }
   * }
   * // iterate
   * store.forEachSync(`users`, (json, file) => {
   *   console.log(file +`: ` + json);
   * }, filter);
   * // => user999: { name: `Thomas` }
   */
  forEachSync(dir, callback, filter) {
    forEachSync(this, dir, callback, filter);
  }

  /**
   * Renames a file or a dir
   * @param {string} dir Dirname
   * @param {string} srcOrDest Current filename or new dirname
   * @param {string} [dest] New filename
   * @returns {Promise}
   * @example
   * (async () => {
   *   // rename a file
   *   await store.rename(`users`, `user001`, `user999`);
   *
   *   // rename a dir
   *   await store.rename(`cars`, `my_cars`);
   * })();
   */
  async rename(dir, srcOrDest, dest) {
    if (dest) {
      return await rename(this, dir, srcOrDest, dest);
    } else {
      return renameDir(this, dir, srcOrDest);
    }
  }

  /**
   * Renames a file or a dir
   * @param {string} dir Dirname
   * @param {string} srcOrDest Current filename or new dirname
   * @param {string} [dest] New filename
   * @example
   * // rename a file
   * store.renameSync(`users`, `user001`, `user999`);
   *
   * // rename a dir
   * store.renameSync(`cars`, `my_cars`);
   */
  renameSync(dir, srcOrDest, dest) {
    if (dest) {
      renameSync(this, dir, srcOrDest, dest);
    } else {
      renameDirSync(this, dir, srcOrDest);
    }
  }

  /**
   * Empty the storage or a dir.
   * If a directory is set, it will be emptied.
   * If no directory is set, the storage will be emptied.
   * @param {string} [dir] Dirname.
   * @returns {Promise}
   * @example
   * (async () => {
   *   // empty the storage
   *   await store.empty();
   *
   *   // empty a dir
   *   await store.empty(`users`);
   * })();
   */
  async empty(dir) {
    return empty(this, dir);
  }

  /**
   * Empty the storage or a dir.
   * If a directory is set, it will be emptied.
   * If no directory is set, the storage will be emptied.
   * @param {string} [dir] Dirname.
   * @example
   * // empty the storage
   * store.emptySync();
   *
   * // empty a dir
   * store.emptySync(`users`);
   */
  emptySync(dir) {
    emptySync(this, dir);
  }

  /**
   * Checks if a directory or a file exists.
   * Checks file if dir and file are set.
   * Checks dir if dir is set only.
   * @param {string} dir Dirname
   * @param {string} [file] Filename
   * @param {string} [dir] Dirname.
   * @returns {Promise} Returns `true` if the dir or file exists, `false` otherwise.
   * @example
   * (async () => {
   *   // check dir
   *   await store.exists(`users`); // => true
   *
   *   // check file
   *   await store.exists(`users`, `tom`); // => false
   * })();
   */
  async exists(dir, file) {
    return await exists(this, dir, file);
  }

  /**
   * Checks if a directory or a file exists.
   * Checks file if dir and file are set.
   * Checks dir if dir is set only.
   * @param {string} dir Dirname
   * @param {string} [file] Filename
   * @returns {boolean} Returns `true` if the dir or file exists, `false` otherwise.
   * @example
   * // check dir
   * store.existsSync(`users`); // => true
   *
   * // check file
   * store.existsSync(`users`, `tom`); // => false
   */
  existsSync(dir, file) {
    return existsSync(this, dir, file);
  }
}

module.exports = JsonStorage;